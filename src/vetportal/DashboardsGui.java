/**
 * File: DashboardsGui.java
 * Date: April 16, 2020
 * @Author: Nour Debiat, Brian Rease, Rebekah Qu
 * Purpose: This window displays the dashboards where users can view appointments, pets, and clients.
 */

package vetportal;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DashboardsGui extends javax.swing.JFrame {

    // Create objects for pages
    VetPortal vetPortal;
    AddClient addClientPage;
    EditClient editClientPage;
    /**
     * Creates new form DashboardsGui
	 * @param vetPortal
	 * @throws java.text.ParseException
     */
    public DashboardsGui(VetPortal vetPortal) throws ParseException {
        super("Vet Portal");
        this.vetPortal = vetPortal;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws ParseException {

        dashboardPanel = new javax.swing.JPanel();
        dashboardTabs = new javax.swing.JTabbedPane();
        appointmentsTab = new javax.swing.JPanel();
        petsTab = new javax.swing.JPanel();
        clientsTab = new javax.swing.JPanel();
        clientTableScroll = new javax.swing.JScrollPane();
        clientsTable = new javax.swing.JTable();
        createClientBtn = new JButton(new ImageIcon(((new ImageIcon("icons/user-plus.png")).getImage()).getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
        cNameSearch = new javax.swing.JLabel();
        cEmailSearch = new javax.swing.JLabel();
        cNumberSearch = new javax.swing.JLabel();
        cSearchBtn = new JButton(new ImageIcon(((new ImageIcon("icons/search.png")).getImage()).getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
        cNameField = new javax.swing.JTextField();
        cEmailField = new javax.swing.JTextField();
        cNumberField = new javax.swing.JTextField();
        logoutBtn = new JButton(new ImageIcon(((new ImageIcon("icons/sign-out.png")).getImage()).getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));

        myTableModel = new MyTableModel();
        table = new JTable(myTableModel);
        renderer = new ActionRenderer();
        editor = new ActionEditor();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dashboardPanel.setBackground(new java.awt.Color(255, 255, 255));
        dashboardPanel.setForeground(new java.awt.Color(41, 41, 41));

        dashboardTabs.setBackground(new java.awt.Color(255, 255, 255));
        dashboardTabs.setForeground(new java.awt.Color(38, 38, 38));
        dashboardTabs.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N

        appointmentsTab.setBackground(new java.awt.Color(255, 255, 255));
        appointmentsTab.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        javax.swing.GroupLayout appointmentsTabLayout = new javax.swing.GroupLayout(appointmentsTab);
        appointmentsTab.setLayout(appointmentsTabLayout);
        appointmentsTabLayout.setHorizontalGroup(
            appointmentsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 695, Short.MAX_VALUE)
        );
        appointmentsTabLayout.setVerticalGroup(
            appointmentsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
        );

        dashboardTabs.addTab("Appointments", appointmentsTab);

        petsTab.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout petsTabLayout = new javax.swing.GroupLayout(petsTab);
        petsTab.setLayout(petsTabLayout);
        petsTabLayout.setHorizontalGroup(
            petsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 695, Short.MAX_VALUE)
        );
        petsTabLayout.setVerticalGroup(
            petsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
        );

        dashboardTabs.addTab("Pets", petsTab);

        clientsTab.setBackground(new java.awt.Color(255, 255, 255));
        
        table.getColumnModel().getColumn(4).setCellRenderer(renderer);
        table.getColumnModel().getColumn(4).setCellEditor(editor);
        table.setRowHeight(renderer.getTableCellRendererComponent(table, null, true, true, 0, 0).getPreferredSize().height);

        clientTableScroll.setBackground(new java.awt.Color(255, 255, 255));

        clientsTable.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        clientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "First Name", "Last Name", "Email Address", "Phone Number", "Actions"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        clientsTable.setGridColor(new java.awt.Color(255, 255, 255));
        clientTableScroll.setViewportView(table);
        if (clientsTable.getColumnModel().getColumnCount() > 0) {
            clientsTable.getColumnModel().getColumn(0).setResizable(false);
            clientsTable.getColumnModel().getColumn(1).setResizable(false);
            clientsTable.getColumnModel().getColumn(2).setResizable(false);
            clientsTable.getColumnModel().getColumn(3).setResizable(false);
            clientsTable.getColumnModel().getColumn(4).setResizable(false);
        }

        createClientBtn.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        createClientBtn.setText("Create New Client");
        createClientBtn.addActionListener(event -> {
            try {
                openCreateClient();
            } catch (ParseException ex) {
                // Do nothing
            }
        });
        
        cNameSearch.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cNameSearch.setText("Last Name:");

        cEmailSearch.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cEmailSearch.setText("Email:");

        cNumberSearch.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cNumberSearch.setText("Phone:");

        cSearchBtn.setBackground(new java.awt.Color(255, 255, 255));
        cSearchBtn.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        cSearchBtn.setText("Search");

        cNameField.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        cEmailField.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        cNumberField.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        javax.swing.GroupLayout clientsTabLayout = new javax.swing.GroupLayout(clientsTab);
        clientsTab.setLayout(clientsTabLayout);
        clientsTabLayout.setHorizontalGroup(
            clientsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientTableScroll)
                    .addGroup(clientsTabLayout.createSequentialGroup()
                        .addGroup(clientsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(createClientBtn)
                            .addGroup(clientsTabLayout.createSequentialGroup()
                                .addComponent(cNameSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cEmailSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cNumberSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cNumberField, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(cSearchBtn)))
                .addContainerGap())
        );
        clientsTabLayout.setVerticalGroup(
            clientsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createClientBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(clientsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cNameSearch)
                    .addComponent(cEmailSearch)
                    .addComponent(cNumberSearch)
                    .addComponent(cSearchBtn)
                    .addComponent(cNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(clientTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        dashboardTabs.addTab("Clients", clientsTab);

        logoutBtn.setBackground(new java.awt.Color(255, 255, 255));
        logoutBtn.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(event -> logout());        

        javax.swing.GroupLayout dashboardPanelLayout = new javax.swing.GroupLayout(dashboardPanel);
        dashboardPanel.setLayout(dashboardPanelLayout);
        dashboardPanelLayout.setHorizontalGroup(
            dashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dashboardTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoutBtn)
                .addContainerGap())
        );
        dashboardPanelLayout.setVerticalGroup(
            dashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoutBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dashboardTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        dashboardTabs.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dashboardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dashboardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Handler for deleteing a client
    private void deleteSelectedClient(String phoneNumber, String firstName, String lastName) {
        // Ask the user to confirm client deletion      
        int delete = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + firstName + " " + lastName + "?", "Confirm Client Deletion", JOptionPane.YES_NO_OPTION);
        // If Yes (0) was selected
        if (delete == 0) {
            // Delete the client
            vetPortal.deleteClient(phoneNumber, firstName, lastName);
            myTableModel.remove();
        }
        // If No (1) was selected do nothing

    } //end of deleteSelectedClient()

    // Handler for logout button click event
    private void logout() {
        // Open Login Page
        vetPortal = new VetPortal();
        vetPortal.setVisible(true);
        // Close Vet Portal Dashboard
        dispose();
    }

    // Handler for create client button click event
    private void openCreateClient() throws ParseException {
	// Open the Add Client Page
        addClientPage = new AddClient(vetPortal);
        addClientPage.setVisible(true);        
    }

    // Handler for edit selected client click event
    private void editSelectedClient(String currentFirstName, String currentLastName, String currentEmail, String currentPhoneNumber) throws ParseException {
        // Open the Edit Client Page and pass the selected client's information
        editClientPage = new EditClient(vetPortal, currentFirstName, currentLastName, currentEmail, currentPhoneNumber);
        editClientPage.setVisible(true);
    }
    
    public JTable getClientsTable() {
        return clientsTable;
    }

    public JTable getTable() {
        return table;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel appointmentsTab;
    private javax.swing.JTextField cEmailField;
    private javax.swing.JLabel cEmailSearch;
    private javax.swing.JTextField cNameField;
    private javax.swing.JLabel cNameSearch;
    private javax.swing.JTextField cNumberField;
    private javax.swing.JLabel cNumberSearch;
    private javax.swing.JButton cSearchBtn;
    private javax.swing.JScrollPane clientTableScroll;
    private javax.swing.JPanel clientsTab;
    private javax.swing.JTable clientsTable;
    private javax.swing.JButton createClientBtn;
    private javax.swing.JPanel dashboardPanel;
    private javax.swing.JTabbedPane dashboardTabs;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JPanel petsTab;

    private MyTableModel myTableModel;
    private JTable table;
    private ActionRenderer renderer;
    private ActionEditor editor;
    // End of variables declaration//GEN-END:variables

    // Action Pane for Clients Table
    public class ActionPane extends JPanel {

        private JButton editButton;
        private JButton deleteButton;

        public ActionPane() {
            setLayout(new GridBagLayout());
            // Add icons and tool tips to buttons
            editButton = new JButton(new ImageIcon(((new ImageIcon("icons/edit.png")).getImage()).getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
            editButton.setToolTipText("Edit Client");
            deleteButton = new JButton(new ImageIcon(((new ImageIcon("icons/trash.png")).getImage()).getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH)));
            deleteButton.setToolTipText("Delete Client");

            add(editButton);
            add(deleteButton);
                    
            editButton.addActionListener(event -> edit());
            deleteButton.addActionListener(event -> delete());            
        } //end of constructor

        public void addActionListener(ActionListener listener) {
            editButton.addActionListener(listener);
            deleteButton.addActionListener(listener);
        }
        
        private void edit() {
            // Get the information for the selected client
            Object selectedFirstName = myTableModel.getValueAt(table.getSelectedRow(), 0);
            Object selectedLastName = myTableModel.getValueAt(table.getSelectedRow(), 1);
            Object selectedEmail = myTableModel.getValueAt(table.getSelectedRow(), 2);
            Object selectedPhoneNumber = myTableModel.getValueAt(table.getSelectedRow(), 3);
            try {
                // Pass to the event handler
                editSelectedClient((String) selectedFirstName, (String) selectedLastName, (String) selectedEmail, (String) selectedPhoneNumber);
            } catch (ParseException ex) {
                // DO nothing
            }
        }          

        private void delete() {
            Object selectedPhoneNumber = myTableModel.getValueAt(table.getSelectedRow(), 3);
            Object selectedFirstName = myTableModel.getValueAt(table.getSelectedRow(), 0);
            Object selectedLastName = myTableModel.getValueAt(table.getSelectedRow(), 1);
            deleteSelectedClient((String) selectedPhoneNumber, (String) selectedFirstName, (String) selectedLastName);
            myTableModel.remove();
        }      
        
    } //end of ActionPane

    public class MyTableModel extends AbstractTableModel {

        private  List<Clients> data;

        public MyTableModel() {
            data = new ArrayList<>(25);
        }

        public List<Clients> getData() {
            return data;
        }

        @Override
        public String getColumnName(int column) {
            String value = null;
            switch (column) {
                case 0:
                    value = "First Name";
                    break;
                case 1:
                    value = "Last Name";
                    break;
                case 2:
                    value = "Email Address";
                    break;
                case 3:
                    value = "Phone Number";
                    break;
                case 4:
                    value = "Actions";
            }
            return value;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            Class value = Object.class;
            switch (columnIndex) {
                case 0:
                case 1:
                case 2:
                case 3:
                    value = String.class;
                    break;
            }
            return value;
        }

        @Override
        public int getRowCount() {
            return data.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Clients obj = data.get(rowIndex);
            String value = null;
            switch (columnIndex) {
                case 0:
                    value = obj.getClientFirstName();
                    break;
                case 1:
                    value = obj.getClientLastName();
                    break;
                case 2:
                    value = obj.getClientEmail();
                    break;
                case 3:
                    value = obj.getClientPhoneNumber();
                    break;
            }
            return value;
        }

        public void add(Clients content) {
            int startIndex = getRowCount();
            data.add(content);
            fireTableRowsInserted(startIndex, getRowCount() - 1);
        }

        public void remove() {
            data.clear();
            fireTableDataChanged();
            vetPortal.viewAllClients();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 4;
        }
    } //end of MyTableModel

    public class ActionRenderer extends DefaultTableCellRenderer {

        private ActionPane actionPane;

        public ActionRenderer() {
            actionPane = new ActionPane();
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return actionPane;
        }
    } //end of DefaultTableCellRenderer

    public class ActionEditor extends AbstractCellEditor implements TableCellEditor {

        private ActionPane actionPane;

        public ActionEditor() {
            actionPane = new ActionPane();
            actionPane.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            stopCellEditing();
                        }
                    });
                }
            });
        }

        @Override
        public Object getCellEditorValue() {
            return null;
        }

        @Override
        public boolean isCellEditable(EventObject e) {
            return true;
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            return actionPane;
        }
    } //end of AbstractCellEditor

} //end of DashboardsGui